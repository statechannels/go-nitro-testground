package chain

import (
	"context"
	"fmt"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	ethTypes "github.com/ethereum/go-ethereum/core/types"
)

const DUMMY_TX_DATA = `{"type":"0x2","nonce":"0x5","gasPrice":null,"maxPriorityFeePerGas":"0x1","maxFeePerGas":"0x63d59447","gas":"0x29a4d","value":"0x0","input":"0x180257e6000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000053900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000008a5c1bfe4000000000000000000000000ff64107479e1fab0865e131331f79fdde3be877500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000aaa6628ec44a8a742987ef3a114ddfe2d4f7adce000000000000000000000000bbb676f9cff8d242e9eac39d063848807d3d1d94000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002ee0000000000000000000000000f5a1bb5607c9d079e46d1b3dc33f257d937b43bd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ee18ff1575055691009aa246ae608132c57a422c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c25b0ef29e428213994cf93298afd77a7056f41074beeb87457f758b7c1a85ef5722be65e000735f98fbcf913972f32c2210a1fce9d435f0aec85277b0dcb479a000000000000000000000000000000000000000000000000000000000000001c5ce0129385cda8d34d91b57e0ede5838eaa24592667e202abb21f24c64bc2d4a3dcacae1708d41daa65f3e9a90d9f2946c5432e020a4ec00afcacef9e4f2d700","v":"0x1","r":"0xe1faa10220886233a77c017d4b9b23c8b8508fe8daf1c986b26258fd8955fd55","s":"0x119bf7e6afdd5059720366b09db7bbbabda7abd4b87a2625443e6cce1da7edf6","to":"0x8c8822b07ff9f58376e6082ed60f0f99d31c9cf5","chainId":"0x539","accessList":[],"hash":"0x41e368ccfe6024c5fcbefb8a87c0d3144fd94add737d7f2290ed3823e54ff884"}`
const FEVM_PARSE_ERROR = "json: cannot unmarshal hex string \"0x\" into Go struct field txJSON.v of type *hexutil.Big"

// FEVMWorkaroundChain overrides some default chain behaviour to work around wallaby's quirks
type FEVMWorkaroundChain struct {
	bind.ContractBackend
	ethereum.TransactionReader
	tr ethereum.TransactionReader
}

// TransactionByHash is overridewn to workaround the fact that wallaby returns nil signatures on the transaction
// Since we are just parsing the transaction to get the asset address, we can just return a dummy transaction with a 0x00 asset addresss
// This is a workaround for https://github.com/filecoin-project/ref-fvm/issues/1158
func (fwc *FEVMWorkaroundChain) TransactionByHash(ctx context.Context, txHash common.Hash) (tx *ethTypes.Transaction, isPending bool, err error) {
	tx, pending, err := fwc.tr.TransactionByHash(context.Background(), txHash)
	if err != nil && strings.Contains(err.Error(), FEVM_PARSE_ERROR) {
		fmt.Printf("WARNING: Cannot parse transaction, using dummy tx json with asset address of 0x00...")
		tx := &ethTypes.Transaction{}
		err := tx.UnmarshalJSON([]byte(DUMMY_TX_DATA))
		if err != nil {

			panic(err)
		}
		return tx, false, nil
	}
	return tx, pending, err
}

func (fwc *FEVMWorkaroundChain) ChainID(ctx context.Context) (*big.Int, error) {
	return big.NewInt(31415926), nil
}
